pragma ever-solidity 0.64.0;

pragma AbiHeader time;
pragma AbiHeader expire;
pragma AbiHeader pubkey;

import "../libraries/OrderGas.tsol";
import "../libraries/OrderErrors.tsol";
import "../libraries/OrderPayloads.tsol";
import "../libraries/OrderRootOperationErrors.tsol";

import "../structures/IOrderRootCreateResult.tsol";

import "../interfaces/IOrderRoot.tsol";
import "../interfaces/IOrderFactory.tsol";
import "../interfaces/IOrderRootCallbacks.tsol";
import "../interfaces/IOrderRootEvents.tsol";

import "../OrderPlatform.tsol";

import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";
import "tip3/contracts/interfaces/ITokenRoot.tsol";
import "tip3/contracts/interfaces/ITokenWallet.tsol";
import "tip3/contracts/interfaces/IAcceptTokensTransferCallback.tsol";

contract TestNewOrderRoot is IOrderRoot, IOrderRootEvents {
    address factory;
    address spentToken;

    address dexRoot;
    address deployer;

    address spentTokenWallet;

    uint32 version;
    uint32 versionOrder;

    TvmCell orderCode;
    TvmCell orderPlatformCode;

    OrderFeeParams fee;

    string newTestField;

    constructor() public { revert(); }

    modifier onlyFactory() {
        require(
            msg.sender.value != 0 && msg.sender == factory,
            OrderErrors.NOT_FACTORY_LIMIT_ORDER_ROOT
        );
        _;
    }

    function onTokenWallet(address _wallet) external {
        require(
            msg.sender.value != 0 && msg.sender == spentToken,
            OrderErrors.NOT_TOKEN1_ROOT
        );
        tvm.rawReserve(address(this).balance - msg.value, 0);
        spentTokenWallet = _wallet;

        IOrderFactory(factory).onOrderRootDeployedCallback{
                value: 0,
                flag: MsgFlag.ALL_NOT_RESERVED
        }(address(this), spentToken, deployer);
    }

    function onTokenWalletReceive(address _wallet) external pure {
        require(msg.sender.value != 0, OrderErrors.NOT_EMPTY_MSG_SENDER);
        _wallet.transfer(0, false, MsgFlag.REMAINING_GAS + MsgFlag.IGNORE_ERRORS);
    }

    function onTokenWalletBeneficiary(address _wallet) external pure {
        require(msg.sender.value != 0, OrderErrors.NOT_EMPTY_MSG_SENDER);
        _wallet.transfer(0, false, MsgFlag.REMAINING_GAS + MsgFlag.IGNORE_ERRORS);
    }

    onBounce(TvmSlice body) external view {
        tvm.rawReserve(OrderGas.TARGET_BALANCE_ROOT, 0);
        uint32 functionId = body.decode(uint32);

        if (
            functionId == tvm.functionId(ITokenRoot.deployWallet) &&
            msg.sender == spentToken
        ){
            deployer.transfer(
                0,
                false,
                MsgFlag.ALL_NOT_RESERVED + MsgFlag.DESTROY_IF_ZERO
            );
        }
    }

    function getFeeParams() override external view responsible returns (OrderFeeParams params) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } (fee);
    }

    function getVersion() override external view responsible returns (uint32) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } version;
    }

    function getVersionOrder() override external view responsible returns (uint32) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } (versionOrder);
    }

    function getSpentToken() override external view responsible returns(address) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } (spentToken);
    }

    function getSpentWallet() override external view responsible returns (address) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } (spentTokenWallet);
    }

    function getFactory() override external view responsible returns(address) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } (factory);
    }

    function getDeployer() override external view responsible returns(address) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } (deployer);
    }

    function getDex() override external view responsible returns(address) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } (dexRoot);
    }

    function setFeeParams(OrderFeeParams params) override external onlyFactory() {
        tvm.rawReserve(OrderGas.TARGET_BALANCE_ROOT, 0);
        fee = params;
        factory.transfer(
            0,
            false,
            MsgFlag.ALL_NOT_RESERVED + MsgFlag.IGNORE_ERRORS
        );
    }

    function setOrderCode(TvmCell _code, uint32 _versionOrder) override external onlyFactory() {
        tvm.rawReserve(address(this).balance - msg.value, 0);

        uint32 prevVersion = versionOrder;
        versionOrder = _versionOrder;
        orderCode = _code;

        emit OrderCodeUpgraded(prevVersion, versionOrder);
        factory.transfer(0, false, MsgFlag.ALL_NOT_RESERVED + MsgFlag.IGNORE_ERRORS);
    }

    function expectedAddressOrder(
        address _factory,
        address _root,
        address _owner,
        address _spentToken,
        address _receiveToken,
        uint64 timeTx,
        uint64 nowTx
    ) override external view responsible returns (address)
    {
        return {
                value: 0,
                bounce: false,
                flag: MsgFlag.REMAINING_GAS
        } address(tvm.hash(tvm.buildStateInit({
                contr: OrderPlatform,
                varInit: {
                    factory: _factory,
                    root: _root,
                    owner: _owner,
                    spentToken: _spentToken,
                    receiveToken: _receiveToken,
                    timeTx: timeTx,
                    nowTx: nowTx,
                    params: abi.encode(dexRoot, orderPlatformCode)
                },
                code: orderPlatformCode
        })
        ));
    }

    function proxyTokensTransfer(
        address _tokenWallet,
        uint128 _gasValue,
        uint128 _amount,
        address _recipient,
        uint128 _deployWalletValue,
        address _remainingGasTo,
        bool _notify,
        TvmCell _payload
    ) override external onlyFactory {

        tvm.accept();

        ITokenWallet(_tokenWallet).transfer{
            value : _gasValue,
            flag : MsgFlag.SENDER_PAYS_FEES
        }(
            _amount,
            _recipient,
            _deployWalletValue,
            _remainingGasTo,
            _notify,
            _payload
        );
    }

    function sendGas(
        address to,
        uint128 _value,
        uint16 _flag
    ) override external onlyFactory {

        tvm.accept();
        to.transfer({value : _value, flag : _flag, bounce : false});
    }


    function upgrade(
        TvmCell _code,
        uint32 _newVersion,
        address _sendGasTo
    ) override external onlyFactory() {
        if (version == _newVersion) {
            tvm.rawReserve(address(this).balance - msg.value, 0);
            _sendGasTo.transfer({ value: 0, flag: MsgFlag.ALL_NOT_RESERVED + MsgFlag.IGNORE_ERRORS });
        } else {
            emit OrderRootCodeUpgraded(_newVersion);

            TvmCell customParams;
            TvmCell data = abi.encode(
                factory, spentToken, spentTokenWallet, version, _newVersion, versionOrder,
                deployer, fee, orderCode, abi.encode(dexRoot, orderPlatformCode), customParams
            );

            tvm.setcode(_code);
            tvm.setCurrentCode(_code);

            onCodeUpgrade(data);
        }
    }

    function onCodeUpgrade(TvmCell _data) private {
        tvm.rawReserve(OrderGas.TARGET_BALANCE_ROOT, 0);

        uint32 _oldVersion;
        TvmCell data;
        TvmCell customParams;
        (
            factory, spentToken, spentTokenWallet, _oldVersion, version, versionOrder,
            deployer, fee, orderCode, data, customParams
        ) = abi.decode(_data, (
            address, address, address, uint32, uint32, uint32,
            address, OrderFeeParams, TvmCell, TvmCell, TvmCell
        ));

        (dexRoot, orderPlatformCode) = abi.decode(data, (address, TvmCell));

        newTestField = "New Order Root";

        factory.transfer({
                value: 0,
                flag: MsgFlag.ALL_NOT_RESERVED + MsgFlag.IGNORE_ERRORS,
                bounce: false
        });
    }

    function newFunc() public view returns (string) {
        return newTestField;
    }
}
