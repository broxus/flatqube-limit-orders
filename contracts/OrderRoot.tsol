pragma ever-solidity 0.64.0;

pragma AbiHeader time;
pragma AbiHeader expire;
pragma AbiHeader pubkey;

import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";
import "tip3/contracts/interfaces/ITokenRoot.tsol";
import "tip3/contracts/interfaces/ITokenWallet.tsol";
import "tip3/contracts/interfaces/IAcceptTokensTransferCallback.tsol";

import "./libraries/OrderGas.tsol";
import "./libraries/OrderErrors.tsol";
import "./libraries/OrderPayloads.tsol";
import "./libraries/OrderRootOperationErrors.tsol";

import "./structures/IOrderRootCreateResult.tsol";

import "./interfaces/IOrderRoot.tsol";
import "./interfaces/IOrderFactory.tsol";
import "./interfaces/IOrderRootCallbacks.tsol";
import "./interfaces/IOrderRootEvents.tsol";

import "./OrderPlatform.tsol";

contract OrderRoot is IOrderRoot, IOrderRootEvents, IAcceptTokensTransferCallback {
    address factory;
    address spentToken;

    address dexRoot;
    address deployer;

    address spentTokenWallet;

    uint32 version;
    uint32 versionOrder;

    TvmCell orderCode;
    TvmCell orderPlatformCode;

    OrderFeeParams fee;

    constructor() public { revert(); }

    modifier onlyFactory() {
        require(msg.sender == factory, OrderErrors.NOT_FACTORY_LIMIT_ORDER_ROOT);
        _;
    }

    function onTokenWallet(address _wallet) external {
        require(msg.sender == spentToken, OrderErrors.NOT_TOKEN1_ROOT);
        tvm.rawReserve(OrderGas.TARGET_BALANCE_ROOT, 0);
        spentTokenWallet = _wallet;

        IOrderFactory(factory).onOrderRootDeployedCallback{
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED
        }(address(this), spentToken, deployer);
    }

    function onTokenWalletReceive(address _wallet) external pure {
        require(msg.sender.value != 0, OrderErrors.NOT_EMPTY_MSG_SENDER);
        _wallet.transfer(0, false, MsgFlag.REMAINING_GAS + MsgFlag.IGNORE_ERRORS);
    }

    function onTokenWalletBeneficiary(address _wallet) external pure {
        require(msg.sender.value != 0, OrderErrors.NOT_EMPTY_MSG_SENDER);
        _wallet.transfer(0, false, MsgFlag.REMAINING_GAS + MsgFlag.IGNORE_ERRORS);
    }

    onBounce(TvmSlice body) external view {
        tvm.rawReserve(OrderGas.TARGET_BALANCE_ROOT, 0);
        uint32 functionId = body.decode(uint32);

        if (
            functionId == tvm.functionId(ITokenRoot.deployWallet) &&
            msg.sender == spentToken
        ){
            deployer.transfer(
                0,
                false,
                MsgFlag.ALL_NOT_RESERVED + MsgFlag.DESTROY_IF_ZERO
            );
        }
    }

    function getFeeParams() external view override responsible returns (OrderFeeParams params) {
		return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } (fee);
	}

    function getVersion() external view override responsible returns (uint32) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } (version);
    }

    function getVersionOrder() external view override responsible returns (uint32) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } (versionOrder);
    }

    function getSpentToken() external view override responsible returns(address) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } (spentToken);
    }

    function getSpentWallet() external view override responsible returns (address) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } (spentTokenWallet);
    }

    function getFactory() external view override responsible returns(address) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } (factory);
    }

    function getDeployer() external view override responsible returns(address) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } (deployer);
    }

    function getDex() external view override responsible returns(address) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } (dexRoot);
    }

    function expectedAddressOrder(
        address _factory,
        address _root,
        address _owner,
        address _spentToken,
        address _receiveToken,
        uint64 timeTx,
        uint64 nowTx
    ) external view override responsible returns (address)
    {
        return {
            value: 0,
            bounce: false,
            flag: MsgFlag.REMAINING_GAS
        } address(tvm.hash(tvm.buildStateInit({
            contr: OrderPlatform,
            varInit: {
                factory: _factory,
                root: _root,
                owner: _owner,
                spentToken: _spentToken,
                receiveToken: _receiveToken,
                timeTx: timeTx,
                nowTx: nowTx,
                params: abi.encode(dexRoot, orderPlatformCode)
            },
            code: orderPlatformCode
            })
        ));
    }

    function setFeeParams(OrderFeeParams params) external override onlyFactory() {
        tvm.rawReserve(OrderGas.TARGET_BALANCE_ROOT, 0);
        fee = params;
        factory.transfer(
            0,
            false,
            MsgFlag.ALL_NOT_RESERVED + MsgFlag.IGNORE_ERRORS
        );
    }

    function buildPayload(
        uint64 callbackId,
        address user,
        address tokenReceive,
        uint128 expectedTokenAmount,
        uint256 backPK,
        uint256 backMatchingPK,
        optional(TvmCell) cancelPayload
    ) external pure returns (TvmCell) {
        TvmBuilder builderBackendPK;
        builderBackendPK.store(backPK);
        builderBackendPK.store(backMatchingPK);

        TvmBuilder builder;
        builder.store(callbackId);
        builder.store(user);
        builder.store(tokenReceive);
        builder.store(expectedTokenAmount);
        builder.storeRef(builderBackendPK);

        if (cancelPayload.hasValue()) {
            builder.store(cancelPayload.get());
        }

        return builder.toCell();
    }

    function proxyTokensTransfer(
        address _tokenWallet,
        uint128 _gasValue,
        uint128 _amount,
        address _recipient,
        uint128 _deployWalletValue,
        address _remainingGasTo,
        bool _notify,
        TvmCell _payload
    ) external override onlyFactory {

        tvm.accept();

        ITokenWallet(_tokenWallet).transfer{
            value : _gasValue,
            flag : MsgFlag.SENDER_PAYS_FEES
        }(
            _amount,
            _recipient,
            _deployWalletValue,
            _remainingGasTo,
            _notify,
            _payload
        );
    }

    function sendGas(
        address to,
        uint128 _value,
        uint16 _flag
    ) external override onlyFactory {

        tvm.accept();
        to.transfer({value : _value, flag : _flag, bounce : false});
    }

    function onAcceptTokensTransfer(
        address /*tokenRoot*/,
        uint128 amount,
        address sender,
        address, /*senderWallet*/
        address originalGasTo,
        TvmCell payload
    ) external override {
        require(msg.sender.value != 0);

        uint8 op = OrderOperationTypes.CREATE_ORDER_IN_ORDER_ROOT;

        TvmSlice payloadSlice = payload.toSlice();
        uint64 callbackId;
        if (payloadSlice.bits() >= 64) {
            callbackId = payloadSlice.decode(uint64);
        }

        TvmCell dataPK = payloadSlice.loadRef();

        bool notifyCancel;
        TvmCell cancelPayload;
        if (payloadSlice.refs() >= 1) {
            notifyCancel = true;
            cancelPayload = payloadSlice.loadRef();
        }

        uint16 errorCode = _checkOperationData(
            msg.sender,
            msg.sender.value,
            payloadSlice,
            dataPK
        );

        if (errorCode == 0) {
            (
                address user,
                address receiveToken,
                uint128 expectedAmount
            ) = payloadSlice.decode(address, address, uint128);

            if (user.value == 0) {
                user = sender;
            }

            address orderAddress = _createOrder(
                expectedAmount, amount, user,
                receiveToken, dataPK
            );

            emit CreateOrder(orderAddress, user, spentToken, amount, receiveToken, expectedAmount);

            IOrderRootCallbacks(user).onOrderCreateOrderSuccess {
                value: OrderGas.OPERATION_CALLBACK_BASE,
                flag: MsgFlag.SENDER_PAYS_FEES + MsgFlag.IGNORE_ERRORS,
                bounce: false
            }(callbackId, orderAddress);

            if (user != sender) {
                IOrderRootCallbacks(sender).onOrderCreateOrderSuccess {
                    value: OrderGas.OPERATION_CALLBACK_BASE,
                    flag: MsgFlag.SENDER_PAYS_FEES + MsgFlag.IGNORE_ERRORS,
                    bounce: false
                }(callbackId, orderAddress);
            }

            ITokenRoot(receiveToken).deployWallet {
                value: OrderGas.DEPLOY_EMPTY_WALLET_VALUE,
                flag: MsgFlag.SENDER_PAYS_FEES,
                callback: OrderRoot.onTokenWalletReceive
            }(user, OrderGas.DEPLOY_EMPTY_WALLET_GRAMS);

            ITokenRoot(receiveToken).deployWallet {
                value: OrderGas.DEPLOY_EMPTY_WALLET_VALUE,
                flag: MsgFlag.SENDER_PAYS_FEES,
                callback: OrderRoot.onTokenWalletBeneficiary
            }(fee.beneficiary, OrderGas.DEPLOY_EMPTY_WALLET_GRAMS);

            tvm.rawReserve(OrderGas.TARGET_BALANCE_ROOT, 0);

            ITokenWallet(msg.sender).transfer {
                value: 0,
                flag: MsgFlag.ALL_NOT_RESERVED,
                bounce: false
            }(
                amount,
                orderAddress,
                OrderGas.DEPLOY_EMPTY_WALLET_GRAMS,
                orderAddress,
                true,
                payload
            );
        }

        if (errorCode != 0) {
            emit CreateOrderReject(errorCode);
            IOrderRootCallbacks(sender).onOrderCreateOrderReject {
                value: OrderGas.OPERATION_CALLBACK_BASE,
                flag: MsgFlag.SENDER_PAYS_FEES + MsgFlag.IGNORE_ERRORS,
                bounce: false
            }(callbackId, errorCode);

            tvm.rawReserve(OrderGas.TARGET_BALANCE_ROOT, 0);

            ITokenWallet(msg.sender).transfer{
                value: 0,
                flag: MsgFlag.ALL_NOT_RESERVED + MsgFlag.IGNORE_ERRORS,
                bounce: false
            }(
                amount,
                sender,
                0,
                originalGasTo,
                notifyCancel,
                OrderPayloads.buildCancelPayloadOrderRoot(op, errorCode, cancelPayload)
            );
        }
    }

    function _checkOperationData(
        address msgSender,
        uint256 msgValue,
        TvmSlice payloadSlice,
        TvmCell dataPk
    ) private view returns(uint16){
        if (msgValue < OrderGas.DEPLOY_ORDER_MIN_VALUE) return OrderRootOperationErrors.VALUE_TOO_LOW;
        if (msgSender != spentTokenWallet) return OrderRootOperationErrors.NOT_SPENT_TOKEN_ROOT;
        TvmSlice dataPkSlice = dataPk.toSlice();
        if (payloadSlice.bits() != 662 || dataPkSlice.bits() != 512) return OrderRootOperationErrors.INVALID_PAYLOAD;

        return 0;
    }

    function _createOrder(
        uint128 _expectedAmount,
        uint128 _amount,
        address _sender,
        address _receiveToken,
        TvmCell _dataPK
    ) private view returns(address) {
        TvmCell emptyCustomParams;
        return (
            new OrderPlatform {
                value: OrderGas.DEPLOY_ORDER,
                stateInit: buildState(
                    orderPlatformCode, _sender, _receiveToken,
                    abi.encode(dexRoot, orderPlatformCode))
            }(
                _amount,
                _expectedAmount,
                versionOrder,
                fee,
                _dataPK,
                orderCode,
                emptyCustomParams
            )
        );
    }

    function buildState(
        TvmCell _code,
        address _sender,
        address _receiveToken,
        TvmCell params
    ) internal view returns (TvmCell) {
        return tvm.buildStateInit({
            contr: OrderPlatform,
            varInit: {
                factory: factory,
                root: address(this),
                owner: _sender,
                spentToken: spentToken,
                receiveToken: _receiveToken,
                timeTx: tx.timestamp,
                nowTx: uint64(now),
                params: params
            },
            code: _code
        });
    }

    function setOrderCode(TvmCell _code, uint32 _versionOrder) external override onlyFactory() {
        tvm.rawReserve(OrderGas.TARGET_BALANCE_ROOT, 0);

        uint32 prevVersion = versionOrder;
        versionOrder = _versionOrder;
        orderCode = _code;

        emit OrderCodeUpgraded(prevVersion, versionOrder);
        factory.transfer(0, false, MsgFlag.ALL_NOT_RESERVED + MsgFlag.IGNORE_ERRORS);
    }

    function upgrade(
        TvmCell _code,
        uint32 _newVersion,
        address _sendGasTo
    ) external override onlyFactory() {
        if (version == _newVersion) {
            tvm.rawReserve(OrderGas.TARGET_BALANCE_ROOT, 0);
            _sendGasTo.transfer({ value: 0, flag: MsgFlag.ALL_NOT_RESERVED + MsgFlag.IGNORE_ERRORS });
        } else {
            emit OrderRootCodeUpgraded(_newVersion);

            TvmCell customParams;
            TvmCell data = abi.encode(
                factory, spentToken, spentTokenWallet, version, _newVersion, versionOrder,
                deployer, fee, orderCode, abi.encode(dexRoot, orderPlatformCode), customParams
            );

            tvm.setcode(_code);
            tvm.setCurrentCode(_code);

            onCodeUpgrade(data);
        }
    }

    function onCodeUpgrade(TvmCell _data) private {
        tvm.rawReserve(OrderGas.TARGET_BALANCE_ROOT, 0);
        tvm.resetStorage();

        uint32 _oldVersion;
        TvmCell data;
        TvmCell _customParams;
        (
            factory, spentToken, spentTokenWallet, _oldVersion, version, versionOrder,
            deployer, fee, orderCode, data, _customParams
        ) = abi.decode(_data, (
            address, address, address, uint32, uint32, uint32,
            address, OrderFeeParams, TvmCell, TvmCell, TvmCell
        ));

        (dexRoot, orderPlatformCode) = abi.decode(data, (address, TvmCell));

        if (_oldVersion == 0){
            ITokenRoot(spentToken).deployWallet{
                value: OrderGas.DEPLOY_EMPTY_WALLET_VALUE,
                flag: MsgFlag.SENDER_PAYS_FEES,
                callback: OrderRoot.onTokenWallet
            }(
                address(this),
                OrderGas.DEPLOY_EMPTY_WALLET_GRAMS
            );

            if (fee.beneficiary.value == 0) {
                fee.beneficiary = factory;
            }

            deployer.transfer({
                value: 0,
                flag: MsgFlag.ALL_NOT_RESERVED + MsgFlag.IGNORE_ERRORS,
                bounce: false
            });
        } else {
            factory.transfer({
                value: 0,
                flag: MsgFlag.ALL_NOT_RESERVED + MsgFlag.IGNORE_ERRORS,
                bounce: false
            });
        }
    }
}
