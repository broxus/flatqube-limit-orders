pragma ever-solidity 0.64.0;

pragma AbiHeader time;
pragma AbiHeader expire;
pragma AbiHeader pubkey;

import "./interfaces/IMultiScatter.tsol";

import "./libraries/MultiScatterPayload.tsol";
import "./libraries/MultiScatterErrors.tsol";
import "./libraries/MultiScatterPayload.tsol";
import "./libraries/MultiScatterGas.tsol";
import "./libraries/OrderGas.tsol";

import "./structures/IMultiScatterStructures.tsol";

import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";
import "tip3/contracts/interfaces/ITokenRoot.tsol";
import "tip3/contracts/interfaces/ITokenWallet.tsol";
import "tip3/contracts/interfaces/IAcceptTokensTransferCallback.tsol";

contract MultiScatter is IAcceptTokensTransferCallback, IMultiScatter {
    uint64 static nonce;

    address owner;
    address pendingOwner;

    uint32 version;
    bool isActive;

    event RequestedOwnerTransfer(address, address);
    event OwnerTransferAccepted(address, address);
    event ErrorCode(uint16);
    event MultiScatterUpgrade(uint32, uint32);

    constructor(uint32 _version, bool _isActive, address _owner) public {
        require(_owner.value != 0);
        tvm.accept();
        tvm.rawReserve(MultiScatterGas.TARGET_BALANCE, 0);

        version = (_version == 0 ? 1: _version);
        isActive = _isActive;
        owner = _owner;
        owner.transfer({
            value: 0,
            bounce: false,
            flag: MsgFlag.ALL_NOT_RESERVED + MsgFlag.IGNORE_ERRORS
        });
    }

    modifier onlyOwner() {
        require(msg.sender == owner, MultiScatterErrors.NOT_OWNER);
        _;
    }

    function transferOwner(address _owner) override external responsible onlyOwner() returns (address) {
        pendingOwner = _owner;
        emit RequestedOwnerTransfer(owner, pendingOwner);

        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } pendingOwner;
    }

    function acceptOwner() override external responsible returns (address) {
        require(
            msg.sender.value != 0 && msg.sender == pendingOwner,
            MultiScatterErrors.NOT_PENDING_OWNER
        );

        emit OwnerTransferAccepted(owner, pendingOwner);
        owner = pendingOwner;
        delete pendingOwner;

        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } owner;
    }

    function getDetails() override external view responsible returns(uint64, address, uint32, bool) {
        return {value : 0, bounce : false, flag : MsgFlag.REMAINING_GAS} (nonce, owner, version, isActive);
    }

    function buildPayload(
        IMultiScatterStructures.PayloadOrder[] payloadsOrders
    ) override external pure returns (TvmCell) {
        return MultiScatterPayload.buildPayload(payloadsOrders);
    }

    function onAcceptTokensTransfer(
        address /*tokenRoot*/,
        uint128 amount,
        address sender,
        address /*senderWallet*/,
        address originalGasTo,
        TvmCell payload
    ) override external {
        require(msg.sender.value != 0);
        tvm.rawReserve(address(this).balance - msg.value, 0);

        (
            bool isValidPayload,
            uint16 errorCode,
            uint8 op,
            IMultiScatterStructures.PayloadOrder[] _payloadsForOrders
        ) = MultiScatterPayload.decodeOnAcceptTokenTransferData(msg.value, amount, payload);

        bool needCancel = !isValidPayload || !isActive;

        if (errorCode != 0){
            emit ErrorCode(errorCode);
        }

        if (!needCancel) {
            if (op == MultiScatterOperationTypes.DISTRIBUTION_FOR_ORDERS) {
                uint128 everForReturn;
                uint128 amountForReturn;
                for (IMultiScatterStructures.PayloadOrder payloadsForOrders : _payloadsForOrders) {
                    if (payloadsForOrders.gasValue >= OrderGas.FILL_ORDER_MIN_VALUE) {
                        ITokenWallet(msg.sender).transfer {
                            value: payloadsForOrders.gasValue,
                            flag: MsgFlag.SENDER_PAYS_FEES,
                            bounce: false
                        }(
                            payloadsForOrders.amount,
                            payloadsForOrders.destination,
                            0,
                            originalGasTo,
                            true,
                            payloadsForOrders.payload
                        );
                    } else {
                        everForReturn += payloadsForOrders.gasValue;
                        amountForReturn += payloadsForOrders.amount;
                    }

                    if (everForReturn > 0) {
                        if (amountForReturn > 0) {
                            TvmCell emptyPayload;
                            ITokenWallet(msg.sender).transfer {
                                value: 0,
                                flag: MsgFlag.ALL_NOT_RESERVED,
                                bounce: false
                            }(
                                amountForReturn,
                                sender,
                                0,
                                originalGasTo,
                                false,
                                emptyPayload
                            );
                        } else {
                            sender.transfer(0, false, MsgFlag.ALL_NOT_RESERVED);
                        }
                    }
                }
            } else {
                needCancel = true;
            }
        }

        if (needCancel) {
            TvmCell emptyPayload;
            ITokenWallet(msg.sender).transfer {
                value: 0,
                flag: MsgFlag.ALL_NOT_RESERVED,
                bounce: false
            }(
                amount,
                sender,
                0,
                originalGasTo,
                false,
                emptyPayload
            );
        }
    }

    function calculateTokensValue(
        IMultiScatterStructures.PayloadOrder[] _payloadsForOrders
    ) public pure override returns (IMultiScatterStructures.CalculationResult) {

        return MultiScatterPayload.calculateTokensValue(_payloadsForOrders);
    }

    function proxyTokensTransfer(
        address _tokenWallet,
        uint128 _gasValue,
        uint128 _amount,
        address _recipient,
        uint128 _deployWalletValue,
        address _remainingGasTo,
        bool _notify,
        TvmCell _payload
    ) override external onlyOwner {

        tvm.accept();

        ITokenWallet(_tokenWallet).transfer{
            value : _gasValue,
            flag : MsgFlag.SENDER_PAYS_FEES
        }(
            _amount,
            _recipient,
            _deployWalletValue,
            _remainingGasTo,
            _notify,
            _payload
        );
    }

    function sendGas(
        address to,
        uint128 _value,
        uint16 _flag
    ) override external onlyOwner {
        tvm.accept();
        to.transfer({value : _value, flag : _flag, bounce : false});
    }

    function upgrade(
        TvmCell _code,
        uint32 _newVersion,
        address _sendGasTo
    ) external override onlyOwner {
        if (version == _newVersion) {
            tvm.rawReserve(address(this).balance - msg.value, 0);
            _sendGasTo.transfer({
                value: 0, flag: MsgFlag.ALL_NOT_RESERVED + MsgFlag.IGNORE_ERRORS
            });
        } else {
            emit MultiScatterUpgrade(version, _newVersion);

            TvmCell data = abi.encode(nonce, owner, pendingOwner, _newVersion, isActive);

            tvm.setcode(_code);
            tvm.setCurrentCode(_code);

            onCodeUpgrade(data);
        }
    }

    function onCodeUpgrade(TvmCell _data) private {}
}
